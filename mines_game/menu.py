import timefrom modules.render import render_menu, final_renderfrom modules.handlers import menu_handlerfrom core import *from mines_game.game_handler import run_gamefrom global_data.metric import Logfrom global_data.global_context import Contextdef run_menu(menu_content: dict, spacing: int, name_of_section: str):    render_menu(spacing, name_of_section, list(menu_content))    Log.add(F"Switched to {name_of_section}", level="DEBUG")    while True:        final_render("menu cursor")        result = menu_handler(menu_content)        if result in menu_content:            menu_content[result]()            break        elif result not in menu_content:            Log.add(f"Nothing has been selected in {name_of_section}", level="DEBUG")        else:            Log.add(f"Invalid selection: '{result}' in {name_of_section}", level="ERROR")            def spacing_definition(content: dict) -> int:    return len(max(content, key=len)) + 3# === Menu Definitions ===def difficulty():    menu_content = {            "easy": lambda : difficulty_setter("easy"),            "medium": lambda : difficulty_setter("medium"),            "hard": lambda : difficulty_setter("hard"),            "back": main_menu,    }    run_menu(menu_content, spacing_definition(menu_content), "difficulty")def grid_settings():    menu_content = {            "10x10": lambda: grid_setter("10x10"),            "20x20": lambda: grid_setter("20x20"),            "30x30": lambda: grid_setter("30x30"),            "custom": lambda: grid_setter("custom"),            "back": settings,    }    run_menu(menu_content, spacing_definition(menu_content), "grid_settings")def log_settings():    menu_content = {            "Info log": lambda: log_visual_setter("info"),            "Debug log": lambda: log_visual_setter("debug"),            "Error log": lambda: log_visual_setter("error"),            "Metric log": lambda: log_visual_setter("metric") ,            "back": main_menu,    }    run_menu(menu_content, spacing_definition(menu_content), "settings")def settings():    menu_content = {            "difficulty": difficulty,            "grid_settings": grid_settings,            "log_settings": log_settings,            "cheat":lambda : cheat_grid(),            "back": main_menu,    }    run_menu(menu_content, spacing_definition(menu_content), "settings")def end_game():    render_menu(20, "end_game", ["Thanks for playing!"])    Log.add("switched to menu = end_game", level="DEBUG")    time.sleep(3)    exit()def main_menu():    menu_content = {            "start_game": lambda: run_game(),            "settings": settings,            "end_game": end_game,    }    run_menu(menu_content, spacing_definition(menu_content), "MAIN MENU")def win(case: bool, mines_count: int):    from core.timer_API import total_time    time = str(total_time())    if case:        message1 = f"Congratulations! You have successfully disarmed all {mines_count} mines"        message2 = f"in {time}"        menu_content = {            message1: main_menu,            message2: main_menu,            "Back to main menu": main_menu,            "Repeat?": run_game,            "End game": end_game,        }    else:        message1 = f"Congratulations! You have disarmed {abs(len(Context.mine_tiles)-mines_count)} mines"        message2 = f"Out of a total of {mines_count} mines"        message3 = f"in {time}"        menu_content = {            message1:  main_menu,            message2:  main_menu,            message3: main_menu,            "Repeat?": run_game,            "End game": end_game,        }    run_menu(menu_content, spacing_definition(menu_content), "END SCREEN")