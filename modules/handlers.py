from global_data.global_context import Contextfrom global_data.metric import MetricData, Logfrom modules import *from core.global_helpers import (    user_input_on_press,    difficulty_setter,    back,    push_menu_position,    grid_setter,)    def position_handler() -> list:    x, y = Context.position_2D    dx, dy = Context.vector    x += dx    y += dy    modifier = Context.position_modifier    x = max(modifier["x_min"], min(x, modifier["x_max"]))    y = max(modifier["y_min"], min(y, modifier["y_max"] - 1))        Context.position_2D = [x, y]    Log.add(f"position has been set {x,y}", level="DEBUG")    return Context.position_2Ddef forced_position_handler(forced_position: list) -> list:    Context.position_2D = list(forced_position)    Log.add(f"forced position was set {list(forced_position)}", level="DEBUG")        return Context.position_2Ddef menu_handler(menu_content: dict) -> str | None:    Log.add(message="Menu handler triggered", level="DEBUG")    menu_keys = list(menu_content.keys())    selected_option = Context.position_2D[1] - Context.position_modifier["y_start"]    if selected_option < 0 or selected_option >= len(menu_keys):        Log.add(message="Invalid menu index", level="ERROR")        return None    selected_key = menu_keys[selected_option]    MetricData.append_metric_data("Selected menu option", selected_key)    result = user_input_on_press()    position_handler()    if result == "enter":        Log.add(message=f"menu handler ended with '{selected_key}' selected", level="DEBUG")        return selected_key    elif result == "esc":        return "main_menu"    elif result == "backspace":        return "back"    return None